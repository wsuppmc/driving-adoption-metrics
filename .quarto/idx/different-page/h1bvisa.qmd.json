{"title":"H-1B Visas in Kansas","markdown":{"yaml":{"title":"H-1B Visas in Kansas","description":"Select measures of H-1B activity in Kansas.","toc":false,"author":"Nigel Soria","badges":true,"categories":["immigration","seasonal","migrant workers","H-1B"],"permalink":"/h-1b/","image":"images/h1b-bar.png"},"headingText":"Definitions","containsRefs":false,"markdown":"\n\n\n-   Fiscal Year: The fiscal year in which U.S. Citizenship and Immigration Services (USCIS) first recorded an approval or denial in the electronic systems. USCIS follows the U.S. Federal Government fiscal year (FY) calendar, so data sets presented by fiscal year cover Oct. 1 of one year to Sept. 30 of the next year. The applications and petitions USCIS receives on a given date are generally adjudicated on a later date. Therefore, data reflect the date USCIS adjudicated the application or petition, rather than the date received.\n\n-   Initial Approval: H-1B petitions with \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129 whose first decision is an approval.\n\n-   Initial Denial: H-1B petitions with \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129 whose first decision is a denial.\n\n-   Continuing Approval: H-1B petitions with anything other than \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129, whose first decision is an approval. This includes, for example, continuing employment, change of employer, and amended petitions.\n\n-   Continuing Denial: H-1B petitions with anything other than \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129 whose first decision is a denial. This includes, for example, continuing employment, change of employer, and amended petitions.\n\n-   NAICS: North American Industry Classification System Code, a character string that stands for an industry classification within the North American Industry Classification System.\n\nNote: The data and the above definitions come from the [U.S. Citizenship and Immigration Services](https://www.uscis.gov/tools/reports-and-studies/h-1b-employer-data-hub).\n\n```{python}\n#| echo: false\n\nimport boto3\nimport dask\nimport dask.dataframe as dd\nimport dask.bag as db\nfrom dask.delayed import delayed\nimport datetime as dt\nimport json\nimport matplotlib as mpl\nimport numpy as np\nimport os\nimport pandas as pd\nfrom pathlib import Path\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom IPython.display import Image\nfrom IPython.display import HTML\nimport time\n\n```\n\n```{python}\n#| echo: false\n\n#hide\n\n# file_path = '../data/uscis/h1b_datahubexport-*.csv'\n# url = 'https://www.uscis.gov/sites/default/files/document/data/h1b_datahubexport-*.csv'\n\n# df = dd.read_csv(file_path, dtype=str)\n\n# df = df[df['State']=='KS']\n\n# convert_dict = {\n#     'Initial Approvals': int, 'Initial Denials': int, \n#     'Continuing Approvals': int, 'Continuing Denials': int,\n#     'NAICS': str, 'ZIP': str\n# }\n# df = df.astype(convert_dict)\n\n# df = df.compute()\n\n# df['total_approvals'] = df['Initial Approvals'] + df['Continuing Approvals']\n# df['total_denials'] = df['Initial Denials'] + df['Continuing Denials']\n# df['total_petitions'] = df['total_approvals'] + df['total_denials']\n\n# naics = pd.read_csv('../data/uscis/naics-list.csv', dtype=str)\n# df = pd.merge(df, naics, how='left', left_on='NAICS', right_on='sector')\n\n# zips = pd.read_csv('../data/uscis/us-zips.csv', dtype=str)\n# df = pd.merge(df, zips[['zip', 'county_name', 'county_fips']], how='left', left_on='ZIP', right_on='zip')\n\n# columns = [\n#     'Fiscal Year', 'Employer', 'Initial Approvals', \n#     'Initial Denials', 'Continuing Approvals', 'Continuing Denials', \n#     'total_approvals', 'total_denials', 'total_petitions',\n#     'sector', 'description', 'State', 'zip', 'county_name', 'county_fips'\n# ]\n\n# names = [\n#     'fiscal_year', 'employer', 'initial_approvals', \n#     'initial_denials', 'continuing_approvals', 'continuing_denials', \n#     'total_approvals', 'total_denials', 'total_petitions',\n#     'sector', 'description', 'state', 'zip', 'county_name', 'county_fips'\n# ]\n\n# name_dict = {columns[i]: names[i] for i in range(len(columns))} \n\n# df = df[columns]\n# df.rename(columns = name_dict, inplace = True) \n\n# df.to_csv('../data/uscis/ks-h1b-data.csv', index=False)\n\ndf = pd.read_csv('data/ks-h1b-data.csv', dtype=str)\n\nconvert_dict = {\n    'initial_approvals': int, 'initial_denials': int, \n    'continuing_approvals': int, 'continuing_denials': int,\n    'total_approvals': int, 'total_denials': int, 'total_petitions': int,\n    'sector': str, 'zip': str\n}\ndf = df.astype(convert_dict)\n```\n\n```{python}\n#| echo: false\n\n#hide\n\nks_gold ='#F1AD02'\nks_blue ='#002569'\nn=500\n\ndef color_scale(c1, c2, n): #fade (linear interpolate) from color c1 (at mix=0) to c2 (mix=1)\n    colors = []\n    c1 = np.array(mpl.colors.to_rgb(c1))\n    c2 = np.array(mpl.colors.to_rgb(c2))\n\n    for x in range(n+1):\n        color = mpl.colors.to_hex((1-x/n)*c1 + x/n*c2)\n        colors.append(color)\n\n    return colors\n```\n\n# Trends in H-1B Approvals in Kansas, FY 2009-2019\n\nThe metrics in the graph below come from the following calculations:\n\n$$\\text{Total Approvals} = \\text{Initial Approvals} + \\text{Continuing Approvals}$$\n\n$$\\text{Total Petitions} = \\text{Initial Approvals} + \\text{Continuing Approvals} + \\text{Initial Denials} + \\text{Continuing Denials}$$\n\n```{python}\n#| echo: false\n\ndf_line_bar = df.groupby('fiscal_year').agg({'total_approvals':'sum', 'total_petitions':'sum'}).reset_index()\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x = df_line_bar['fiscal_year'],\n        y = df_line_bar['total_approvals'],\n        marker_color = 'rgb(241, 173, 2)',\n        name = 'Total Approvals',\n        yaxis = 'y'\n    ),\n)\n\nfig.add_trace(\n    go.Bar(\n        x = df_line_bar['fiscal_year'],\n        y = df_line_bar['total_petitions'],\n        marker_color = 'rgb(0, 37, 105)',\n        name = 'Total Petitions',\n        yaxis = 'y'\n    ),\n)\n\nfig.update_layout(\n#     title={\n#         'text': '<b>Trends in H-1B Approvals in Kansas, FY 2009-2019</b>',\n#         'y':0.9,\n#         'x':0.5,\n#         'xanchor': 'center',\n#         'yanchor': 'top'\n#     },\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        zeroline=True,\n        showticklabels=True,\n        linecolor='rgb(0, 0, 0)',\n        dtick=1.0,\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n#         title={\n#             'text': '<b>Total Approvals</b>',\n#             'font': {'color': 'rgb(241, 173, 2)'\n#             }\n#         },\n        showgrid=True,\n        zeroline=True,\n        showline=True,\n        linecolor='rgb(0, 0, 0)',\n        overlaying='y2',\n        gridcolor='rgb(200, 200, 200)',\n        rangemode='tozero',\n#         range=[0,70000],\n        anchor='x',\n        separatethousands = True,\n        side='left'\n    ),\n    yaxis2=dict(\n#         title={\n#             'text': '<b>Total Petitions</b>',\n#             'font': {'color': 'rgb(0, 37, 105)'\n#             }\n#         },\n        zeroline=True,\n        showline=True,\n        linecolor='rgb(0, 0, 0)',\n        side='right',\n        rangemode = 'tozero',\n#         range=[0,140000],\n        anchor='x',\n        separatethousands = True,\n    ),\n    xaxis_tickangle=-45,\n    showlegend=True,\n    plot_bgcolor='white',\n)\n\nfig.show()\n```\n\n# Total H-1B Approvals in FY 2019, by County\n\nHover your mouse over a county to reveals the county's name, the number of initial approvals, and the number of continuing approvals. The coloring on the map is based on the total approvals, which is the sum of intial approvals and continuing approvals.\n\n```{python}\n#| echo: false\n\n#hide\n\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n        counties = json.load(response)\n\ndf_map = df.groupby(['county_name', 'county_fips']).agg({\n    'initial_approvals':'sum', 'continuing_approvals':'sum', 'total_approvals':'sum'\n}).reset_index()\n\ncolors = color_scale(ks_gold, ks_blue, n)\n\nfig = go.Figure(go.Choroplethmapbox(geojson=counties, locations=df_map['county_fips'], z=df_map['total_approvals'].astype(str),\n                                    colorscale=colors, zmin=df_map['total_approvals'].min(), zmax=df_map['total_approvals'].max(),\n                                   marker_opacity=0.5, marker_line_width=0,\n                                   text= df_map['county_name'].str.capitalize() + ' County'\n                                   '<br>Initial Approvals: ' + df_map['initial_approvals'].astype(int).map(lambda x: '{:,}'.format(x)).astype(str) +\n                                   '<br>Continuing Approvals: ' + df_map['continuing_approvals'].astype(int).map(lambda x: '{:,}'.format(x)).astype(str),\n                                   hoverinfo='text',\n                                   colorbar={'title':'Total Approvals', 'separatethousands':True}\n                                   ))\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=6, mapbox_center = {\"lat\": 38.863379, \"lon\": -98.234060})\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.update_layout(legend_title='<b> Total Approvals </b>')\n# fig.update_layout(\n#     title={\n#     'text': '<b>COVID-19 Cases by County</b>',\n#     'y':0.95,\n#     'x':0.5,\n#     'xanchor': 'center',\n#     'yanchor': 'top'\n#     },\n# )\n\nfig.show()\n```\n\n# Initial and Continuing H-1B Approvals in Fiscal Year 2019, by Industry (Top 5)\n\n\\\n\n```{python}\n#| echo: false\n\n#hide\n\ndf_ind = df[df['fiscal_year']=='2019']\ndf_ind = df_ind.groupby('description').agg({'initial_approvals':'sum', 'continuing_approvals':'sum'}).reset_index()\ndf_ind['total_approvals'] = df_ind['initial_approvals'] + df_ind['continuing_approvals']\ndf_ind = df_ind[df_ind['total_approvals']>=100]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = df_ind['initial_approvals'],\n    y = df_ind['description'],\n    name='Initial Approvals',\n    orientation='h',\n    marker=dict(\n        color='rgba(20,37,105, 0.6)',\n        line=dict(color='rgba(0,37,105, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n    x = df_ind['continuing_approvals'],\n    y = df_ind['description'],\n    name='Continuing Approvals',\n    orientation='h',\n    marker=dict(\n        color='rgba(241, 173, 2, 0.6)',\n        line=dict(color='rgba(241, 173, 2, 1.0)', width=3)\n    )\n))\n\nfig.update_yaxes(\n    showgrid=True,\n    zeroline=True,\n    showline=True,\n#     dtick=1,\n    linecolor='rgb(0, 0, 0)'\n)\nfig.update_xaxes(\n    showgrid=True,\n    zeroline=True,\n#     tickformat=',.0%',\n    showline=True,\n#     range=[0,.25],\n#     dtick=.05,\n    linecolor='rgb(0, 0, 0)')\n\nfig.update_layout(\n#     title={\n#     'text': '<b>Initial and Continuing H-1B Approvals in Fiscal Year 2019, by Industry (Top 5)</b>',\n#     'y':0.95,\n#     'x':0.5,\n#     'xanchor': 'center',\n#     'yanchor': 'top'\n#     },\n    yaxis={'categoryorder':'total ascending'},\n    plot_bgcolor='white',\n    barmode='stack'\n)\n\nfig.show()\n# fig.write_image('h1b-bar.png')\n```\n","srcMarkdownNoYaml":"\n\n# Definitions\n\n-   Fiscal Year: The fiscal year in which U.S. Citizenship and Immigration Services (USCIS) first recorded an approval or denial in the electronic systems. USCIS follows the U.S. Federal Government fiscal year (FY) calendar, so data sets presented by fiscal year cover Oct. 1 of one year to Sept. 30 of the next year. The applications and petitions USCIS receives on a given date are generally adjudicated on a later date. Therefore, data reflect the date USCIS adjudicated the application or petition, rather than the date received.\n\n-   Initial Approval: H-1B petitions with \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129 whose first decision is an approval.\n\n-   Initial Denial: H-1B petitions with \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129 whose first decision is a denial.\n\n-   Continuing Approval: H-1B petitions with anything other than \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129, whose first decision is an approval. This includes, for example, continuing employment, change of employer, and amended petitions.\n\n-   Continuing Denial: H-1B petitions with anything other than \\\"new employment\\\" or \\\"new concurrent employment\\\" selected on Part 2, Question 2 of the Form I-129 whose first decision is a denial. This includes, for example, continuing employment, change of employer, and amended petitions.\n\n-   NAICS: North American Industry Classification System Code, a character string that stands for an industry classification within the North American Industry Classification System.\n\nNote: The data and the above definitions come from the [U.S. Citizenship and Immigration Services](https://www.uscis.gov/tools/reports-and-studies/h-1b-employer-data-hub).\n\n```{python}\n#| echo: false\n\nimport boto3\nimport dask\nimport dask.dataframe as dd\nimport dask.bag as db\nfrom dask.delayed import delayed\nimport datetime as dt\nimport json\nimport matplotlib as mpl\nimport numpy as np\nimport os\nimport pandas as pd\nfrom pathlib import Path\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom IPython.display import Image\nfrom IPython.display import HTML\nimport time\n\n```\n\n```{python}\n#| echo: false\n\n#hide\n\n# file_path = '../data/uscis/h1b_datahubexport-*.csv'\n# url = 'https://www.uscis.gov/sites/default/files/document/data/h1b_datahubexport-*.csv'\n\n# df = dd.read_csv(file_path, dtype=str)\n\n# df = df[df['State']=='KS']\n\n# convert_dict = {\n#     'Initial Approvals': int, 'Initial Denials': int, \n#     'Continuing Approvals': int, 'Continuing Denials': int,\n#     'NAICS': str, 'ZIP': str\n# }\n# df = df.astype(convert_dict)\n\n# df = df.compute()\n\n# df['total_approvals'] = df['Initial Approvals'] + df['Continuing Approvals']\n# df['total_denials'] = df['Initial Denials'] + df['Continuing Denials']\n# df['total_petitions'] = df['total_approvals'] + df['total_denials']\n\n# naics = pd.read_csv('../data/uscis/naics-list.csv', dtype=str)\n# df = pd.merge(df, naics, how='left', left_on='NAICS', right_on='sector')\n\n# zips = pd.read_csv('../data/uscis/us-zips.csv', dtype=str)\n# df = pd.merge(df, zips[['zip', 'county_name', 'county_fips']], how='left', left_on='ZIP', right_on='zip')\n\n# columns = [\n#     'Fiscal Year', 'Employer', 'Initial Approvals', \n#     'Initial Denials', 'Continuing Approvals', 'Continuing Denials', \n#     'total_approvals', 'total_denials', 'total_petitions',\n#     'sector', 'description', 'State', 'zip', 'county_name', 'county_fips'\n# ]\n\n# names = [\n#     'fiscal_year', 'employer', 'initial_approvals', \n#     'initial_denials', 'continuing_approvals', 'continuing_denials', \n#     'total_approvals', 'total_denials', 'total_petitions',\n#     'sector', 'description', 'state', 'zip', 'county_name', 'county_fips'\n# ]\n\n# name_dict = {columns[i]: names[i] for i in range(len(columns))} \n\n# df = df[columns]\n# df.rename(columns = name_dict, inplace = True) \n\n# df.to_csv('../data/uscis/ks-h1b-data.csv', index=False)\n\ndf = pd.read_csv('data/ks-h1b-data.csv', dtype=str)\n\nconvert_dict = {\n    'initial_approvals': int, 'initial_denials': int, \n    'continuing_approvals': int, 'continuing_denials': int,\n    'total_approvals': int, 'total_denials': int, 'total_petitions': int,\n    'sector': str, 'zip': str\n}\ndf = df.astype(convert_dict)\n```\n\n```{python}\n#| echo: false\n\n#hide\n\nks_gold ='#F1AD02'\nks_blue ='#002569'\nn=500\n\ndef color_scale(c1, c2, n): #fade (linear interpolate) from color c1 (at mix=0) to c2 (mix=1)\n    colors = []\n    c1 = np.array(mpl.colors.to_rgb(c1))\n    c2 = np.array(mpl.colors.to_rgb(c2))\n\n    for x in range(n+1):\n        color = mpl.colors.to_hex((1-x/n)*c1 + x/n*c2)\n        colors.append(color)\n\n    return colors\n```\n\n# Trends in H-1B Approvals in Kansas, FY 2009-2019\n\nThe metrics in the graph below come from the following calculations:\n\n$$\\text{Total Approvals} = \\text{Initial Approvals} + \\text{Continuing Approvals}$$\n\n$$\\text{Total Petitions} = \\text{Initial Approvals} + \\text{Continuing Approvals} + \\text{Initial Denials} + \\text{Continuing Denials}$$\n\n```{python}\n#| echo: false\n\ndf_line_bar = df.groupby('fiscal_year').agg({'total_approvals':'sum', 'total_petitions':'sum'}).reset_index()\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x = df_line_bar['fiscal_year'],\n        y = df_line_bar['total_approvals'],\n        marker_color = 'rgb(241, 173, 2)',\n        name = 'Total Approvals',\n        yaxis = 'y'\n    ),\n)\n\nfig.add_trace(\n    go.Bar(\n        x = df_line_bar['fiscal_year'],\n        y = df_line_bar['total_petitions'],\n        marker_color = 'rgb(0, 37, 105)',\n        name = 'Total Petitions',\n        yaxis = 'y'\n    ),\n)\n\nfig.update_layout(\n#     title={\n#         'text': '<b>Trends in H-1B Approvals in Kansas, FY 2009-2019</b>',\n#         'y':0.9,\n#         'x':0.5,\n#         'xanchor': 'center',\n#         'yanchor': 'top'\n#     },\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        zeroline=True,\n        showticklabels=True,\n        linecolor='rgb(0, 0, 0)',\n        dtick=1.0,\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n#         title={\n#             'text': '<b>Total Approvals</b>',\n#             'font': {'color': 'rgb(241, 173, 2)'\n#             }\n#         },\n        showgrid=True,\n        zeroline=True,\n        showline=True,\n        linecolor='rgb(0, 0, 0)',\n        overlaying='y2',\n        gridcolor='rgb(200, 200, 200)',\n        rangemode='tozero',\n#         range=[0,70000],\n        anchor='x',\n        separatethousands = True,\n        side='left'\n    ),\n    yaxis2=dict(\n#         title={\n#             'text': '<b>Total Petitions</b>',\n#             'font': {'color': 'rgb(0, 37, 105)'\n#             }\n#         },\n        zeroline=True,\n        showline=True,\n        linecolor='rgb(0, 0, 0)',\n        side='right',\n        rangemode = 'tozero',\n#         range=[0,140000],\n        anchor='x',\n        separatethousands = True,\n    ),\n    xaxis_tickangle=-45,\n    showlegend=True,\n    plot_bgcolor='white',\n)\n\nfig.show()\n```\n\n# Total H-1B Approvals in FY 2019, by County\n\nHover your mouse over a county to reveals the county's name, the number of initial approvals, and the number of continuing approvals. The coloring on the map is based on the total approvals, which is the sum of intial approvals and continuing approvals.\n\n```{python}\n#| echo: false\n\n#hide\n\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n        counties = json.load(response)\n\ndf_map = df.groupby(['county_name', 'county_fips']).agg({\n    'initial_approvals':'sum', 'continuing_approvals':'sum', 'total_approvals':'sum'\n}).reset_index()\n\ncolors = color_scale(ks_gold, ks_blue, n)\n\nfig = go.Figure(go.Choroplethmapbox(geojson=counties, locations=df_map['county_fips'], z=df_map['total_approvals'].astype(str),\n                                    colorscale=colors, zmin=df_map['total_approvals'].min(), zmax=df_map['total_approvals'].max(),\n                                   marker_opacity=0.5, marker_line_width=0,\n                                   text= df_map['county_name'].str.capitalize() + ' County'\n                                   '<br>Initial Approvals: ' + df_map['initial_approvals'].astype(int).map(lambda x: '{:,}'.format(x)).astype(str) +\n                                   '<br>Continuing Approvals: ' + df_map['continuing_approvals'].astype(int).map(lambda x: '{:,}'.format(x)).astype(str),\n                                   hoverinfo='text',\n                                   colorbar={'title':'Total Approvals', 'separatethousands':True}\n                                   ))\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=6, mapbox_center = {\"lat\": 38.863379, \"lon\": -98.234060})\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.update_layout(legend_title='<b> Total Approvals </b>')\n# fig.update_layout(\n#     title={\n#     'text': '<b>COVID-19 Cases by County</b>',\n#     'y':0.95,\n#     'x':0.5,\n#     'xanchor': 'center',\n#     'yanchor': 'top'\n#     },\n# )\n\nfig.show()\n```\n\n# Initial and Continuing H-1B Approvals in Fiscal Year 2019, by Industry (Top 5)\n\n\\\n\n```{python}\n#| echo: false\n\n#hide\n\ndf_ind = df[df['fiscal_year']=='2019']\ndf_ind = df_ind.groupby('description').agg({'initial_approvals':'sum', 'continuing_approvals':'sum'}).reset_index()\ndf_ind['total_approvals'] = df_ind['initial_approvals'] + df_ind['continuing_approvals']\ndf_ind = df_ind[df_ind['total_approvals']>=100]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = df_ind['initial_approvals'],\n    y = df_ind['description'],\n    name='Initial Approvals',\n    orientation='h',\n    marker=dict(\n        color='rgba(20,37,105, 0.6)',\n        line=dict(color='rgba(0,37,105, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n    x = df_ind['continuing_approvals'],\n    y = df_ind['description'],\n    name='Continuing Approvals',\n    orientation='h',\n    marker=dict(\n        color='rgba(241, 173, 2, 0.6)',\n        line=dict(color='rgba(241, 173, 2, 1.0)', width=3)\n    )\n))\n\nfig.update_yaxes(\n    showgrid=True,\n    zeroline=True,\n    showline=True,\n#     dtick=1,\n    linecolor='rgb(0, 0, 0)'\n)\nfig.update_xaxes(\n    showgrid=True,\n    zeroline=True,\n#     tickformat=',.0%',\n    showline=True,\n#     range=[0,.25],\n#     dtick=.05,\n    linecolor='rgb(0, 0, 0)')\n\nfig.update_layout(\n#     title={\n#     'text': '<b>Initial and Continuing H-1B Approvals in Fiscal Year 2019, by Industry (Top 5)</b>',\n#     'y':0.95,\n#     'x':0.5,\n#     'xanchor': 'center',\n#     'yanchor': 'top'\n#     },\n    yaxis={'categoryorder':'total ascending'},\n    plot_bgcolor='white',\n    barmode='stack'\n)\n\nfig.show()\n# fig.write_image('h1b-bar.png')\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","embed-resources":true,"toc":false,"css":["../styles.css"],"output-file":"h1bvisa.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.309","page-layout":"full","footer":"footer.html","title":"H-1B Visas in Kansas","description":"Select measures of H-1B activity in Kansas.","author":"Nigel Soria","badges":true,"categories":["immigration","seasonal","migrant workers","H-1B"],"permalink":"/h-1b/","image":"images/h1b-bar.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}