---
title: "Economic Distress Index"
description: "A county-level measure of economic distress based on seven indicators."
toc: false
permalink: /distress-index/
image: images/ks-edi.png
---

```{python}
#| echo: false

import numpy as np
import numpy as np
import pandas as pd
import requests
import scipy.stats as ss
import matplotlib as mpl
import json
import plotly.graph_objects as go
import plotly.figure_factory as ff
import plotly.express as px
from urllib.request import urlopen
from IPython.display import Image
from tabulate import tabulate
from IPython.display import HTML

print("\n")
```

## Key Insights

-   Eleven of the 27 counties in the South Kansas Region fall within the fourth quartile (i.e., most distressed) of the index for all Kansas counties.

-   Only five of the 27 counties in the South Kansas Region fall within the first quartile (i.e., least distressed) of the index for all Kansas counties.

-   Chautauqua County is the most distressed county in Kansas (and the South Kansas Region).

-   Miami County is the least distressed county in the South Kansas Region.

## Methodology

The index combines seven indicators into a single, comparative measure of economic well-being. The index is constructed from the U.S. Census Bureau's American Community Survey (ACS) 5-Year Estimates and County Business Patterns (CBP) datasets. @fig-indicators contains the seven indicators along with their descriptions and sources.

```{python}
#| echo: false
#| label: fig-indicators
#| fig-cap: "Economic Distress Indicators and Descriptions"


values = [
    [
        'No High School Diploma', 
        'Housing Vacancy Rate', 
        'Unemployment Rate', 
        'Poverty Rate', 
        'Median Income Ratio', 
        'Change in Employment', 
        'Change in Establishments'
    ], #1st col
    [
        'Percentage of the population 25 years of age and older <b>without a high school diploma or equivalent</b>',
        'Percentage of habitable housing that is <b>unoccupied</b> (excludes properties that are for seasonal, recreational, or occasional use)',
        'The number of <b>unemployed people</b> as a fraction of the labor force',
        'Percentage of the population living <b>under the poverty line</b>',
        'Median household income <b>as a percentage</b> of the state‚Äôs median household income',
        'Percentage change in the <b>number of jobs</b>',
        'Percentage change in the number of <b>business establishments</b>'
    ],
    [
        'ACS (2016-2020)',
        'ACS (2016-2020)',
        'ACS (2016-2020)',
        'ACS (2016-2020)',
        'ACS (2016-2020)',
        'CBP (2019, 2020)',
        'CBP (2019, 2020)'
    ]
]


fig = go.Figure(data=[go.Table(
  columnorder = [1,2,3],
  columnwidth = [25,60,20],
  header = dict(
    values = [
        ['<b>Indicator</b>'],
        ['<b>Description</b>'],
        ['<b>Source</b>']
    ],
    line_color='darkslategray',
    fill_color=['rgb(22,74,88)', 'rgb(231,38,40)', 'rgb(255,193,0)'],
    align=['center','center','center'],
    font=dict(color='white', size=12),
    height=20
  ),
  cells=dict(
    values=values,
    line_color='darkslategray',
    fill=dict(color=['white', 'white', 'white']),
    align=['left', 'left', 'left'],
    font=dict(color='black', size=12),
    height=30)
    )
])

fig.show()
print("\n")
print("\n")

```

These seven indicators are individually normalized across 105 counties on a scale of 0 to 100, where 100 represents the most distressed county and 0 represents the least distressed county. The individual indicators are normalized using the following formula:

```{python}
#| echo: false
print("\n")
```

$$\text{Index Indicator}_{ij} = \frac{X_{ij}-\text{min}_{(\text{of } 105)}\{X_i\}}{\text{max}_{(\text{of } 105)}\{X_i\}-\text{min}_{(\text{of } 105)}\{X_i\}} \times 100, $$

```{python}
#| echo: false
print("\n")
```

where ùëãùëñùëó is the value of indicator ùëñ for county ùëó.

In most cases, higher values represent greater distress; however, for the median income ratio, change in employment, and change in establishments, lower values indicate greater distress. Therefore, normalization requires a slightly different formula:

```{python}
#| echo: false
print("\n")
```

$$\text{Index Indicator}_{ij} = \frac{\text{max}_{(\text{of } 105)}\{X_i\}-X_{ij}}{\text{max}_{(\text{of } 105)}\{X_i\}-\text{min}_{(\text{of } 105)}\{X_i\}} \times 100. $$

```{python}
#| echo: false
print("\n")
```

The final index value results from taking the geometric mean of the seven indicators. To handle the zeros, one is added to each normalized indicator; therefore, one is then subtracted from the calculated mean.

\
\

## Results

```{python}
#| echo: false
#| label: fig-results
#| fig-cap: Economic Distress Index for Kansas Counties

skc = pd.DataFrame(
    ['20001', '20003', '20011',
     '20015', '20019', '20021',
     '20031', '20035', '20037',
     '20049', '20059', '20073',
     '20077', '20079', '20095',
     '20099', '20107', '20113',
     '20115', '20121', '20125',
     '20133', '20155', '20173',
     '20191', '20205', '20207'], 
    columns=['fips']
)

token = 'pk.eyJ1Ijoid3N1cHBtYyIsImEiOiJjbDA2dWNiZmEyYjRqM2lsc2hrZ2g5Z3ZrIn0.Qcm0AOjbrEP6NPJ6u-14EA'

with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)  

df = pd.read_csv('data/2020-distress-index-data.csv', dtype={'fips':'str'})
df = df.sort_values(by=['index_quartile'])

colorscales = [
    ((0.0, 'rgba(231,38,40,0.25)'), (1.0, 'rgba(231,38,40,0.25)')),
    ((0.0, 'rgba(231,38,40,0.5)'), (1.0, 'rgba(231,38,40,0.5)')),
    ((0.0, 'rgba(231,38,40,0.75)'), (1.0, 'rgba(231,38,40,0.75)')),
    ((0.0, 'rgba(231,38,40,1.0)'), (1.0, 'rgba(231,38,40,1.0)'))
]

fig = go.Figure()
for i, quartile in enumerate(df['index_quartile'].unique()):
    dfp = df[df['index_quartile'] == quartile]
    fig.add_choroplethmapbox(
        geojson=counties, locations=dfp['fips'],
        z=[i,] * len(dfp), featureidkey='id',
        showlegend=True, name=quartile,
        colorscale=colorscales[i], showscale=False,
        text='County:  ' + dfp['county'].str.title() +
        '<br>Quartile:  ' + dfp['index_quartile'].str.split(' ').str[0],
        hoverinfo='text'
    )

choropleth = go.Choroplethmapbox(
        geojson=counties,
        locations=df[df.fips.isin(skc['fips'].tolist())]['fips'],
        z=df[df.fips.isin(skc['fips'].tolist())]['fips'],
        zmin=0, zmax=0,
        colorscale = [[0,'rgba(0, 0, 0, 0)'],[1,'rgba(0, 0, 0, 0)']],
        marker_line_color='rgb(131,201,217)',
        marker_line_width=2,
        showscale = False,
        text='County:  ' + df[df.fips.isin(skc['fips'].tolist())]['county'].str.title() +
        '<br>Quartile:  ' + df[df.fips.isin(skc['fips'].tolist())]['index_quartile'].str.split(' ').str[0],
        hoverinfo='text'
    )

fig.add_trace(choropleth)       
    
fig.update_layout(legend_title='Index Performance', margin={'r':0,'t':0,'l':0,'b':0},
                  mapbox_accesstoken=token,
                  mapbox=dict(style='carto-positron', zoom=6, 
                              center={'lat': 38.4937, 'lon': -98.3804},))

fig.show()


print("\n")
print("\n")

```

```{python}
#| echo: false
#| label: fig-results-next
#| fig-cap: Distress Indicators and Quartiles by County<br>(1st Quartile = Least Distressed, 4th Quartile = Most Distressed)

df = df.sort_values(by=['county'])

names = [
    '<b>County</b>', '<b>No HS Diploma</b>', '<b>Unemp Rate</b>', 
    '<b>Poverty Rate</b>', '<b>Median Income</b>', '<b>Estab Change</b>', 
    '<b>Emp Change</b>', '<b>Vacancy Rate</b>', '<b>Distress Index</b>', '<b>Index Quartile</b>'
]

fig = go.Figure(data=[go.Table(
    columnwidth = [15]+[10]*9,
    header=dict(values=names,
                line_color='darkslategray',
                fill_color='rgb(131,201,217)',
                font=dict(color='white', size=12),
                align='center'),
    cells=dict(values=[df.county, df.hs_lower.apply('{0:.2f}'.format), df.unemployment_rate.apply('{0:.2f}'.format), 
                       df.poverty_rate.apply('{0:.2f}'.format), df.med_inc_rate.apply('{0:.2f}'.format), 
                       df.est_chg.apply('{0:.2f}'.format), df.emp_chg.apply('{0:.2f}'.format), 
                       df.vacancy_rate.apply('{0:.2f}'.format), df.distress_index.apply('{0:.2f}'.format), 
                       df.index_quartile.str.split(' ').str[0]],
               line_color='darkslategray',
               fill_color=['rgba(131,201,217,0.2)','white'],
               font=dict(color='black', size=12),
               align=['left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'center']))
])

fig.show()
```
